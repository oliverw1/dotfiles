set nocompatible

filetype plugin indent on

" Ask before unsafe actions
set confirm

set encoding=utf-8

" Set <leader> key to <Space>

nnoremap <SPACE> <Nop>
let mapleader = " "

" store backupfiles (foo~), swapfiles (foo.swp) and undo files (foo.un~) in non-default locations
set backupdir=.backup/,~/.backup//,.,/tmp//
set directory=.swp/,~/.swp//,.,/tmp//
set undodir=.undo/,~/.undo//,.,/tmp//" Enable easy access/reloads of vimrc
nnoremap <leader>rc :vsplit $MYVIMRC<cr>
nnoremap <leader>so :source $MYVIMRC<cr>

" provide home-row access to esc
inoremap kj <esc>

" Stop using arrow keys - learn to stay on the home row of most keyboard
" layouts.
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" set hybrid line numbering for in-focus buffers
set number relativenumber

" Underline the line on which the cursor is
set cursorline

set tabstop=4
set shiftwidth=4
set expandtab
" Disable cursor line highlighting in Insert mode
augroup aug_cursor_line
  au!
  au InsertEnter * setlocal nocursorline
  au InsertLeave * setlocal cursorline
augroup END

" Display uncompleted keystrokes in the status line
set showcmd

set hlsearch
set incsearch

nnoremap <leader><leader> :noh<cr>

" Tweak autocompletion behavior for <C-n>/<C-p> in insert mode
" Default is ".,w,b,u,t,i" without "i", where:
" . - scan current buffer. Same to invoking <C-x><C-n> individually
" w - buffers in other windows
" b - loaded buffers in buffer list
" u - unloaded buffers in buffer list
" t - tags. Same to invoking <C-x><C-]> individually
" i - included files. We don't need this.
" kspell, when spell check is active, use words from spellfiles
set complete-=i
set complete+=kspell

" Do not insert first sugggestion
"set completeopt=menu,preview,noinsert

" Timeout of user inactivity. Used to save swap file, and by vim-gitgutter plugin
set updatetime=1000

" Auto indentation
" Preserve the same level of indentation each time we create a new line in Insert mode.
" Also, do smart autoindenting when starting a new line.
set autoindent
set smartindent

" Experimental. Round indent to multiple of 'shiftwidth'.
set shiftround


augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Plugins
"   Install vim-plug if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')
Plug 'lifepillar/vim-solarized8'
Plug 'junegunn/vim-peekaboo' " see the contents of the registers
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jremmen/vim-ripgrep'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'janko-m/vim-test' 
Plug 'nathanaelkane/vim-indent-guides' " IndentGuidesToggle/<leader>ig
Plug 'valloric/youcompleteme'
Plug 'airblade/vim-gitgutter'
" Plug 'vim-airline/vim-airline'
" Plug 'powerline/powerline'
Plug 'machakann/vim-highlightedyank'
Plug 'michaeljsmith/vim-indent-object' " ai/ii
Plug 'ryanoasis/vim-devicons'
" Plug 'stefandtw/quickfix-reflector' 
" Plug tmhedberg/SimplyIFold
call plug#end()

" enable indentation guides (plugin) on startup
let g:indent_guides_enable_on_vim_startup = 0

if executable('rg')
    let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
endif

let g:rg_command = 'rg --vimgrep -S'

nnoremap <Leader>b :CtrlPBuffer<CR>

" Running tests (see vim-test)
nmap <silent> tn :TestNearest<CR>
nmap <silent> tf :TestFile<CR>
nmap <silent> ts :TestSuite<CR>
nmap <silent> tl :TestLast<CR>
nmap <silent> tg :TestVisit<CR>
let test#python#runner = 'pytest'


" don't redraw the screen during macro execution, so it completes faster
set lazyredraw

nnoremap Q @@
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h

" allow 'gf' to jump to the file README.md even if it's referred to in text as
" "the README"
set suffixesadd=.md

" make marking lines easier when in the flow of writing
inoremap ;1 <c-o>ma

augroup pop_todo
    autocmd!
    au BufNewFile,BufRead *.md syntax keyword todo TODO
augroup END


augroup md_syntax
    autocmd!
    au BufNewFile,BufRead *.md inoremap ;` ```<cr><cr>```<Up><Up>
    au BufNewFile,BufRead *.md inoremap ;c ```<cr><cr>```<Up><Up>
augroup END
set rtp+=/usr/share/powerline/bindings/vim
" always display powerline
set laststatus=2

" Let small deletes also use the numbered registers
if exists("##TextYankPost")
  function! SmallDeleteRing(event) abort
    if a:event['operator'] == 'y'
      " Don't care about actual yanks
      return
    endif
    if a:event['regtype'] ==# 'V'
      " Vim already handles linewise deletions
      return
    endif
    
    let regcontents = a:event['regcontents']
    if len(regcontents) > 1
      " Vim already handles deletions spanning multiple lines
      return
    endif

    let deleted = regcontents[0]

    if len(deleted) == 1
      " Don't want to catch single-character deletions (in particular, x)
      return
    endif

    " Grab registers 1-8
    let one_through_eight = mapnew(range(1, 8), {k, v -> getreg(v)})

    " Set register "1
    call setreg(1, deleted)

    " Set registers 2-9
    for i in range(1, 8)
      call setreg(i + 1, one_through_eight[i - 1])
    endfor
  endfunction

  augroup small_delete_ring
    autocmd!
    autocmd TextYankPost * call SmallDeleteRing(v:event)
  augroup END
endif

autocmd BufNewFile *.sh 0r ~/.vim/templates/bash.sh
autocmd BufNewFile *.html 0r ~/.vim/templates/html

" PLUGIN: FZF
nnoremap <Leader>b :Buffers<CR>
nnoremap <leader>ff :Files<cr>
nnoremap <Leader>fg :Rg<CR>
nnoremap <Leader>/ :BLines<CR>
nnoremap <Leader>' :Marks<CR>
nnoremap <Leader>g :Commits<CR>
nnoremap <Leader>H :Helptags<CR>
nnoremap <Leader>hh :History<CR>
nnoremap <Leader>h: :History:<CR>
nnoremap <Leader>h/ :History/<CR> 

set grepprg=rg\ --vimgrep\ --smart-case\ --follow

